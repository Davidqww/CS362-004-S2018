        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
  1770552:    8:int compare(const void* a, const void* b) {
  1770552:    9:  if (*(int*)a > *(int*)b)
   905860:   10:    return 1;
   864692:   11:  if (*(int*)a < *(int*)b)
   855458:   12:    return -1;
     9234:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:      int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:       struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;     
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
        8:   45:  PutSeed((long)randomSeed);
        -:   46:  //check number of players
        8:   47:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   48:    {
    #####:   49:      return -1;
        -:   50:    }
        -:   51:
        -:   52:  //set number of players
        8:   53:  state->numPlayers = numPlayers;
        -:   54:
        -:   55:  //check selected kingdom cards are different
       88:   56:  for (i = 0; i < 10; i++)
        -:   57:    {
      880:   58:      for (j = 0; j < 10; j++)
        -:   59:        {
      800:   60:    if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   61:      {
    #####:   62:        return -1;
        -:   63:      }
        -:   64:        }
        -:   65:    }
        -:   66:
        -:   67:
        -:   68:  //initialize supply
        -:   69:  ///////////////////////////////
        -:   70:
        -:   71:  //set number of Curse cards
        8:   72:  if (numPlayers == 2)
        -:   73:    {
        8:   74:      state->supplyCount[curse] = 10;
        -:   75:    }
    #####:   76:  else if (numPlayers == 3)
        -:   77:    {
    #####:   78:      state->supplyCount[curse] = 20;
        -:   79:    }
        -:   80:  else
        -:   81:    {
    #####:   82:      state->supplyCount[curse] = 30;
        -:   83:    }
        -:   84:
        -:   85:  //set number of Victory cards
        8:   86:  if (numPlayers == 2)
        -:   87:    {
        8:   88:      state->supplyCount[estate] = 8;
        8:   89:      state->supplyCount[duchy] = 8;
        8:   90:      state->supplyCount[province] = 8;
        -:   91:    }
        -:   92:  else
        -:   93:    {
    #####:   94:      state->supplyCount[estate] = 12;
    #####:   95:      state->supplyCount[duchy] = 12;
    #####:   96:      state->supplyCount[province] = 12;
        -:   97:    }
        -:   98:
        -:   99:  //set number of Treasure cards
        8:  100:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  101:  state->supplyCount[silver] = 40;
        8:  102:  state->supplyCount[gold] = 30;
        -:  103:
        -:  104:  //set number of Kingdom cards
      168:  105:  for (i = adventurer; i <= treasure_map; i++)        //loop all cards
        -:  106:    {
     1320:  107:      for (j = 0; j < 10; j++)              //loop chosen cards
        -:  108:  {
     1240:  109:    if (kingdomCards[j] == i)
        -:  110:      {
        -:  111:        //check if card is a 'Victory' Kingdom card
       80:  112:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  113:    {
       18:  114:      if (numPlayers == 2){ 
        9:  115:        state->supplyCount[i] = 8; 
        -:  116:      }
    #####:  117:      else{ state->supplyCount[i] = 12; }
        -:  118:    }
        -:  119:        else
        -:  120:    {
       71:  121:      state->supplyCount[i] = 10;
        -:  122:    }
       80:  123:        break;
        -:  124:      }
        -:  125:    else    //card is not in the set choosen for the game
        -:  126:      {
     1160:  127:        state->supplyCount[i] = -1;
        -:  128:      }
        -:  129:  }
        -:  130:
        -:  131:    }
        -:  132:
        -:  133:  ////////////////////////
        -:  134:  //supply intilization complete
        -:  135:
        -:  136:  //set player decks
       24:  137:  for (i = 0; i < numPlayers; i++)
        -:  138:    {
       16:  139:      state->deckCount[i] = 0;
       64:  140:      for (j = 0; j < 3; j++)
        -:  141:  {
       48:  142:    state->deck[i][j] = estate;
       48:  143:    state->deckCount[i]++;
        -:  144:  }
      128:  145:      for (j = 3; j < 10; j++)
        -:  146:  {
      112:  147:    state->deck[i][j] = copper;
      112:  148:    state->deckCount[i]++;    
        -:  149:  }
        -:  150:    }
        -:  151:
        -:  152:  //shuffle player decks
       24:  153:  for (i = 0; i < numPlayers; i++)
        -:  154:    {
       16:  155:      if ( shuffle(i, state) < 0 )
        -:  156:  {
    #####:  157:    return -1;
        -:  158:  }
        -:  159:    }
        -:  160:
        -:  161:  //draw player hands
       24:  162:  for (i = 0; i < numPlayers; i++)
        -:  163:    {  
        -:  164:      //initialize hand size to zero
       16:  165:      state->handCount[i] = 0;
       16:  166:      state->discardCount[i] = 0;
        -:  167:      //draw 5 cards
        -:  168:      // for (j = 0; j < 5; j++)
        -:  169:      //  {
        -:  170:      //    drawCard(i, state);
        -:  171:      //  }
        -:  172:    }
        -:  173:  
        -:  174:  //set embargo tokens to 0 for all supply piles
      224:  175:  for (i = 0; i <= treasure_map; i++)
        -:  176:    {
      216:  177:      state->embargoTokens[i] = 0;
        -:  178:    }
        -:  179:
        -:  180:  //initialize first player's turn
        8:  181:  state->outpostPlayed = 0;
        8:  182:  state->phase = 0;
        8:  183:  state->numActions = 1;
        8:  184:  state->numBuys = 1;
        8:  185:  state->playedCardCount = 0;
        8:  186:  state->whoseTurn = 0;
        8:  187:  state->handCount[state->whoseTurn] = 0;
        -:  188:  //int it; move to top
        -:  189:
        -:  190:  //Moved draw cards to here, only drawing at the start of a turn
       48:  191:  for (it = 0; it < 5; it++){
       40:  192:    drawCard(state->whoseTurn, state);
        -:  193:  }
        -:  194:
        8:  195:  updateCoins(state->whoseTurn, state, 0);
        -:  196:
        8:  197:  return 0;
        -:  198:}
        -:  199:
     1522:  200:int shuffle(int player, struct gameState *state) {
        -:  201: 
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
     1522:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
     1522:  208:  if (state->deckCount[player] < 1)
      500:  209:    return -1;
     1022:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
   255374:  213:  while (state->deckCount[player] > 0) {
   253330:  214:    card = floor(Random() * state->deckCount[player]);
   253330:  215:    newDeck[newDeckPos] = state->deck[player][card];
   253330:  216:    newDeckPos++;
 21135779:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
 20882449:  218:      state->deck[player][i] = state->deck[player][i+1];
        -:  219:    }
   253330:  220:    state->deckCount[player]--;
        -:  221:  }
   254352:  222:  for (i = 0; i < newDeckPos; i++) {
   253330:  223:    state->deck[player][i] = newDeck[i];
   253330:  224:    state->deckCount[player]++;
        -:  225:  }
        -:  226:
     1022:  227:  return 0;
        -:  228:}
        -:  229:
    #####:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  231:{ 
        -:  232:  int card;
    #####:  233:  int coin_bonus = 0;     //tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
    #####:  236:  if (state->phase != 0)
        -:  237:    {
    #####:  238:      return -1;
        -:  239:    }
        -:  240:  
        -:  241:  //check if player has enough actions
    #####:  242:  if ( state->numActions < 1 )
        -:  243:    {
    #####:  244:      return -1;
        -:  245:    }
        -:  246:  
        -:  247:  //get card played
    #####:  248:  card = handCard(handPos, state);
        -:  249:  
        -:  250:  //check if selected card is an action
    #####:  251:  if ( card < adventurer || card > treasure_map )
        -:  252:    {
    #####:  253:      return -1;
        -:  254:    }
        -:  255:  
        -:  256:  //play card
    #####:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:  
        -:  262:  //reduce number of actions
    #####:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
    #####:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  267:  
    #####:  268:  return 0;
        -:  269:}
        -:  270:
    #####:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
    #####:  279:  who = state->whoseTurn;
        -:  280:
    #####:  281:  if (state->numBuys < 1){
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
    #####:  284:    return -1;
    #####:  285:  } else if (supplyCount(supplyPos, state) <1){
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
    #####:  288:    return -1;
    #####:  289:  } else if (state->coins < getCost(supplyPos)){
        -:  290:    if (DEBUG) 
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  292:    return -1;
        -:  293:  } else {
    #####:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
    #####:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  297:  
    #####:  298:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
    #####:  307:  return 0;
        -:  308:}
        -:  309:
    #####:  310:int numHandCards(struct gameState *state) {
    #####:  311:  return state->handCount[ whoseTurn(state) ];
        -:  312:}
        -:  313:
    #####:  314:int handCard(int handPos, struct gameState *state) {
    #####:  315:  int currentPlayer = whoseTurn(state);
    #####:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
       15:  319:int supplyCount(int card, struct gameState *state) {
       15:  320:  return state->supplyCount[card];
        -:  321:}
        -:  322:
    #####:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
        -:  328:    {
    #####:  329:      if (state->deck[player][i] == card) count++;
        -:  330:    }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
        -:  333:    {
    #####:  334:      if (state->hand[player][i] == card) count++;
        -:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
        -:  338:    {
    #####:  339:      if (state->discard[player][i] == card) count++;
        -:  340:    }
        -:  341:
    #####:  342:  return count;
        -:  343:}
        -:  344:
     2004:  345:int whoseTurn(struct gameState *state) {
     2004:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
    #####:  349:int endTurn(struct gameState *state) {
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
        -:  353:  
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
        -:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
        3:  389:int isGameOver(struct gameState *state) {
        -:  390:  int i;
        -:  391:  int j;
        -:  392:  
        -:  393:  //if stack of Province cards is empty, the game ends
        3:  394:  if (state->supplyCount[province] == 0)
        -:  395:    {
        1:  396:      return 1;
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
        2:  400:  j = 0;
       52:  401:  for (i = 0; i < 25; i++)
        -:  402:    {
       50:  403:      if (state->supplyCount[i] == 0)
        -:  404:  {
        5:  405:    j++;
        -:  406:  }
        -:  407:    }
        2:  408:  if ( j >= 3)
        -:  409:    {
        1:  410:      return 1;
        -:  411:    }
        -:  412:
        1:  413:  return 0;
        -:  414:}
        -:  415:
       24:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
       24:  419:  int score = 0;
        -:  420:  //score from hand
       96:  421:  for (i = 0; i < state->handCount[player]; i++)
        -:  422:    {
       72:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
       72:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
       72:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
       72:  426:      if (state->hand[player][i] == province) { score = score + 6; };
       72:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       72:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  429:    }
        -:  430:
        -:  431:  //score from discard
       30:  432:  for (i = 0; i < state->discardCount[player]; i++)
        -:  433:    {
        6:  434:      if (state->discard[player][i] == curse) { score = score - 1; };
        6:  435:      if (state->discard[player][i] == estate) { score = score + 1; };
        6:  436:      if (state->discard[player][i] == duchy) { score = score + 3; };
        6:  437:      if (state->discard[player][i] == province) { score = score + 6; };
        6:  438:      if (state->discard[player][i] == great_hall) { score = score + 1; };
        6:  439:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  440:    }
        -:  441:
        -:  442:  //score from deck
       30:  443:  for (i = 0; i < state->discardCount[player]; i++)
        -:  444:    {
        6:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
        6:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
        6:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
        6:  448:      if (state->deck[player][i] == province) { score = score + 6; };
        6:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
        6:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  451:    }
        -:  452:
       24:  453:  return score;
        -:  454:}
        -:  455:
    #####:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;  
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
        -:  467:  {
    #####:  468:    players[i] = -9999;
        -:  469:  }
        -:  470:      else
        -:  471:  {
    #####:  472:    players[i] = scoreFor (i, state);
        -:  473:  }
        -:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:    {
    #####:  480:      if (players[i] > players[j])
        -:  481:  {
    #####:  482:    j = i;
        -:  483:  }
        -:  484:    }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  490:    {
    #####:  491:      if ( players[i] == highScore && i > currentPlayer )
        -:  492:  {
    #####:  493:    players[i]++;
        -:  494:  }
        -:  495:    }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  500:    {
    #####:  501:      if ( players[i] > players[j] )
        -:  502:  {
    #####:  503:    j = i;
        -:  504:  }
        -:  505:    }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  510:    {
    #####:  511:      if ( players[i] == highScore )
        -:  512:  {
    #####:  513:    players[i] = 1;
        -:  514:  }
        -:  515:      else
        -:  516:  {
    #####:  517:    players[i] = 0;
        -:  518:  }
        -:  519:    }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
   187886:  524:int drawCard(int player, struct gameState *state)
        -:  525:{ int count;
        -:  526:  int deckCounter;
   187886:  527:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  528:    
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
   254176:  532:    for (i = 0; i < state->discardCount[player];i++){
   253170:  533:      state->deck[player][i] = state->discard[player][i];
   253170:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
     1006:  537:    state->deckCount[player] = state->discardCount[player];
     1006:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
     1006:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  542:   
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
     1006:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
     1006:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:    
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:    
     1006:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
     1006:  558:    if (deckCounter == 0)
    #####:  559:      return -1;
        -:  560:
     1006:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     1006:  562:    state->deckCount[player]--;
     1006:  563:    state->handCount[player]++;//Increment hand count
        -:  564:  }
        -:  565:
        -:  566:  else{
   186880:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
   186880:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
   186880:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   186880:  575:    state->deckCount[player]--;
   186880:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
   187886:  579:  return 0;
        -:  580:}
        -:  581:
    #####:  582:int getCost(int cardNumber)
        -:  583:{
    #####:  584:  switch( cardNumber ) 
        -:  585:    {
        -:  586:    case curse:
    #####:  587:      return 0;
        -:  588:    case estate:
    #####:  589:      return 2;
        -:  590:    case duchy:
    #####:  591:      return 5;
        -:  592:    case province:
    #####:  593:      return 8;
        -:  594:    case copper:
    #####:  595:      return 0;
        -:  596:    case silver:
    #####:  597:      return 3;
        -:  598:    case gold:
    #####:  599:      return 6;
        -:  600:    case adventurer:
    #####:  601:      return 6;
        -:  602:    case council_room:
    #####:  603:      return 5;
        -:  604:    case feast:
    #####:  605:      return 4;
        -:  606:    case gardens:
    #####:  607:      return 4;
        -:  608:    case mine:
    #####:  609:      return 5;
        -:  610:    case remodel:
    #####:  611:      return 4;
        -:  612:    case smithy:
    #####:  613:      return 4;
        -:  614:    case village:
    #####:  615:      return 3;
        -:  616:    case baron:
    #####:  617:      return 4;
        -:  618:    case great_hall:
    #####:  619:      return 3;
        -:  620:    case minion:
    #####:  621:      return 5;
        -:  622:    case steward:
    #####:  623:      return 3;
        -:  624:    case tribute:
    #####:  625:      return 5;
        -:  626:    case ambassador:
    #####:  627:      return 3;
        -:  628:    case cutpurse:
    #####:  629:      return 4;
        -:  630:    case embargo: 
    #####:  631:      return 2;
        -:  632:    case outpost:
    #####:  633:      return 5;
        -:  634:    case salvager:
    #####:  635:      return 4;
        -:  636:    case sea_hag:
    #####:  637:      return 4;
        -:  638:    case treasure_map:
    #####:  639:      return 4;
        -:  640:    }
        -:  641:  
    #####:  642:  return -1;
        -:  643:}
        -:  644:
        -:  645:/* This function will handle the effects of an adventurer card. Reveal two from your deck until you have revealed two treasure
        -:  646: * cards. Those two treasure cards will go into your hand. The revealed cards will go into the discard pile*/
        -:  647:
     1001:  648:void adventurerEffect(int* cardDrawn, int currentPlayer, int* drawntreasure, struct gameState *state, int temphand[], int* tempHandCount)
        -:  649:{
        -:  650:  // Keep drawing cards until two treasure cards are revealed 
    94381:  651:  while(*drawntreasure<2){
        -:  652:
        -:  653:    //if the deck is empty we need to shuffle discard and add to deck
    92379:  654:    if (state->deckCount[currentPlayer] <1){
      500:  655:        shuffle(currentPlayer, state);
        -:  656:    }
        -:  657:
        -:  658:    // Draw a card and add it to the hand
    92379:  659:    drawCard(currentPlayer, state);
    92379:  660:    *cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  661:  
        -:  662:    // If the card drawn is a treausre card
    92379:  663:    if (*cardDrawn == copper || *cardDrawn == silver || *cardDrawn == gold)
     2002:  664:        *drawntreasure = *drawntreasure + 1;
        -:  665:  
        -:  666:    // If the card drawn is not a treasure card
        -:  667:    else{
    90377:  668:        temphand[*tempHandCount]= *cardDrawn;
    90377:  669:        state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    90377:  670:        *tempHandCount = *tempHandCount + 1;
        -:  671:    }
        -:  672:    }
        -:  673:
        -:  674:  // discard all cards in play that have been drawn
    91380:  675:    while(*tempHandCount - 1 > 0){
        -:  676:    //printf("temp count: %d\n", *tempHandCount);
        -:  677:
    89378:  678:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[*tempHandCount-1]; 
    89378:  679:    *tempHandCount = *tempHandCount - 1;
        -:  680:    }
     1001:  681:}
        -:  682:
        -:  683:/* This function will handle the effects of a council room card. 
        -:  684: * The player will draw 4 cards and increase the number of buys by 1.
        -:  685: * Each of the other players will draw a card */
    #####:  686:void councilroomEffect(int currentPlayer, int handPos, struct gameState *state)
        -:  687:{
        -:  688:   //+4 Cards
    #####:  689:  int i = 0;
        -:  690:
    #####:  691:  for (i = 0; i < 3; i++)
        -:  692:  {
    #####:  693:    drawCard(currentPlayer, state);
        -:  694:  }
        -:  695:      
        -:  696:  //+1 Buy
    #####:  697:  state->numBuys++;
        -:  698:  //Each other player draws a card
    #####:  699:  for (i = 0; i < state->numPlayers; i++)
        -:  700:  {
    #####:  701:    if ( i != currentPlayer )
        -:  702:    {
    #####:  703:      drawCard(i, state);
        -:  704:    }
        -:  705:  }
        -:  706:    
        -:  707:    //put played card in played card pile
    #####:  708:  discardCard(handPos, currentPlayer, state, 0);
    #####:  709:}
        -:  710:
        -:  711:
        -:  712:
        -:  713:
        -:  714:/* This function will handle the effects of an smithy card. Draw three card into your hand */
        -:  715:
      501:  716:void smithyEffect(int currentPlayer, int handPos, struct gameState *state)
        -:  717:{
        -:  718:  // Draw three cards and insert each card to the hand
      501:  719:  int i = 0;
     2004:  720:  for (i = 0; i < 3; i++)
        -:  721:  {
     1503:  722:    drawCard(currentPlayer, state);
        -:  723:  }
        -:  724:      
        -:  725:     //discard card from hand
      501:  726:     discardCard(handPos, currentPlayer, state, 1);
      501:  727:}
        -:  728:
        -:  729:/* This function will handle the effects of steward card. There are three different choices the player can choice from 
        -:  730: * Choice 1: Draw two cards
        -:  731: * Choice 2: Plus two coins that can be used in the buy phase
        -:  732: * Choice 3: Trash two cards from your hand
        -:  733: */
    #####:  734:void stewardEffect(int choice1, int choice3, int choice2, int currentPlayer, int handPos, struct gameState *state)
        -:  735:{
    #####:  736:    if (choice1 == 1)
        -:  737:  {
        -:  738:    // Draw two cards
    #####:  739:    drawCard(currentPlayer, state);
    #####:  740:    drawCard(currentPlayer, state);
        -:  741:  }
    #####:  742:    else if (choice1 == 2)
        -:  743:  {
        -:  744:    // Add two coins
    #####:  745:    state->coins = state->coins + 2;
        -:  746:  }
        -:  747:    else
        -:  748:  {
        -:  749:    //trash 2 cards in hand
    #####:  750:    discardCard(choice2, currentPlayer, state, 0);
    #####:  751:    discardCard(choice3, currentPlayer, state, 0);
        -:  752:  }
        -:  753:      
        -:  754:      //discard card from hand
    #####:  755:      discardCard(handPos, currentPlayer, state, 0);
        -:  756:  
    #####:  757:}
        -:  758:
        -:  759:/* This function will handle the effects of a village card. Draw one card into your hand and you get 2 extra actions */
        -:  760:
      501:  761:void villageEffect(int currentPlayer, int handPos, struct gameState *state)
        -:  762:{
        -:  763:  /* + 1 Card, draw a card into your hand from the deck */
      501:  764:  drawCard(currentPlayer, state);
        -:  765:      
        -:  766:    //+2 Actions, increase the number of actions stored in the gameState struct
      501:  767:    state->numActions = state->numActions + 2;
        -:  768:      
        -:  769:    //Discard played card from hand
      501:  770:    discardCard(handPos, currentPlayer, state, 0);
      501:  771:}
        -:  772:
        -:  773:
     2004:  774:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  775:{
        -:  776:  int i;
        -:  777:  int j;
        -:  778:  int k;
        -:  779:  int x;
        -:  780:  int index;
     2004:  781:  int currentPlayer = whoseTurn(state);
     2004:  782:  int nextPlayer = currentPlayer + 1;
        -:  783:
     2004:  784:  int tributeRevealedCards[2] = {-1, -1};
        -:  785:  int temphand[MAX_HAND];// moved above the if statement
     2004:  786:  int drawntreasure=0;
     2004:  787:  int cardDrawn=0;
     2004:  788:  int z = 0;// this is the counter for the temp hand
     2004:  789:  if (nextPlayer > (state->numPlayers - 1)){
     1030:  790:    nextPlayer = 0;
        -:  791:  }
        -:  792:  
        -:  793:  
        -:  794:  //uses switch to select card and perform actions
     2004:  795:  switch( card ) 
        -:  796:    {
        -:  797:    case adventurer:
        -:  798:   
     1001:  799:    adventurerEffect(&cardDrawn, currentPlayer, &drawntreasure, state, temphand, &z);
     1001:  800:        return 0;
        -:  801:      
        -:  802:    case council_room:
    #####:  803:    councilroomEffect(currentPlayer, handPos, state);
        -:  804:      
    #####:  805:        return 0;
        -:  806:      
        -:  807:    case feast:
        -:  808:      //gain card with cost up to 5
        -:  809:      //Backup hand
    #####:  810:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  811:  temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  812:  state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  813:      }
        -:  814:      //Backup hand
        -:  815:
        -:  816:      //Update Coins for Buy
    #####:  817:      updateCoins(currentPlayer, state, 5);
    #####:  818:      x = 1;//Condition to loop on
    #####:  819:      while( x == 1) {//Buy one card
    #####:  820:  if (supplyCount(choice1, state) <= 0){
        -:  821:    if (DEBUG)
        -:  822:      printf("None of that card left, sorry!\n");
        -:  823:
        -:  824:    if (DEBUG){
        -:  825:      printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  826:    }
        -:  827:  }
    #####:  828:  else if (state->coins < getCost(choice1)){
    #####:  829:    printf("That card is too expensive!\n");
        -:  830:
        -:  831:    if (DEBUG){
        -:  832:      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  833:    }
        -:  834:  }
        -:  835:  else{
        -:  836:
        -:  837:    if (DEBUG){
        -:  838:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  839:    }
        -:  840:
    #####:  841:    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  842:    x = 0;//No more buying cards
        -:  843:
        -:  844:    if (DEBUG){
        -:  845:      printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  846:    }
        -:  847:
        -:  848:  }
        -:  849:      }     
        -:  850:
        -:  851:      //Reset Hand
    #####:  852:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  853:  state->hand[currentPlayer][i] = temphand[i];
    #####:  854:  temphand[i] = -1;
        -:  855:      }
        -:  856:      //Reset Hand
        -:  857:            
    #####:  858:      return 0;
        -:  859:      
        -:  860:    case gardens:
    #####:  861:      return -1;
        -:  862:      
        -:  863:    case mine:
    #####:  864:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  865:
    #####:  866:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  867:  {
    #####:  868:    return -1;
        -:  869:  }
        -:  870:    
    #####:  871:      if (choice2 > treasure_map || choice2 < curse)
        -:  872:  {
    #####:  873:    return -1;
        -:  874:  }
        -:  875:
    #####:  876:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  877:  {
    #####:  878:    return -1;
        -:  879:  }
        -:  880:
    #####:  881:      gainCard(choice2, state, 2, currentPlayer);
        -:  882:
        -:  883:      //discard card from hand
    #####:  884:      discardCard(handPos, currentPlayer, state, 0);
        -:  885:
        -:  886:      //discard trashed card
    #####:  887:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  888:  {
    #####:  889:    if (state->hand[currentPlayer][i] == j)
        -:  890:      {
    #####:  891:        discardCard(i, currentPlayer, state, 0);      
    #####:  892:        break;
        -:  893:      }
        -:  894:  }
        -:  895:      
    #####:  896:      return 0;
        -:  897:      
        -:  898:    case remodel:
    #####:  899:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  900:
    #####:  901:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  902:  {
    #####:  903:    return -1;
        -:  904:  }
        -:  905:
    #####:  906:      gainCard(choice2, state, 0, currentPlayer);
        -:  907:
        -:  908:      //discard card from hand
    #####:  909:      discardCard(handPos, currentPlayer, state, 0);
        -:  910:
        -:  911:      //discard trashed card
    #####:  912:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  913:  {
    #####:  914:    if (state->hand[currentPlayer][i] == j)
        -:  915:      {
    #####:  916:        discardCard(i, currentPlayer, state, 0);      
    #####:  917:        break;
        -:  918:      }
        -:  919:  }
        -:  920:
        -:  921:
    #####:  922:      return 0;
        -:  923:    
        -:  924:    case smithy:
      501:  925:      smithyEffect(currentPlayer, handPos, state); 
      501:  926:        return 0;
        -:  927:    
        -:  928:    case village:
      501:  929:    villageEffect(currentPlayer, handPos, state);
      501:  930:        return 0;
        -:  931:    
        -:  932:    case baron:
    #####:  933:      state->numBuys++;//Increase buys by 1!
    #####:  934:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  935:  int p = 0;//Iterator for hand!
    #####:  936:  int card_not_discarded = 1;//Flag for discard set!
    #####:  937:  while(card_not_discarded){
    #####:  938:    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  939:      state->coins += 4;//Add 4 coins to the amount of coins
    #####:  940:      state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  941:      state->discardCount[currentPlayer]++;
    #####:  942:      for (;p < state->handCount[currentPlayer]; p++){
    #####:  943:        state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  944:      }
    #####:  945:      state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  946:      state->handCount[currentPlayer]--;
    #####:  947:      card_not_discarded = 0;//Exit the loop
        -:  948:    }
    #####:  949:    else if (p > state->handCount[currentPlayer]){
        -:  950:      if(DEBUG) {
        -:  951:        printf("No estate cards in your hand, invalid choice\n");
        -:  952:        printf("Must gain an estate if there are any\n");
        -:  953:      }
    #####:  954:      if (supplyCount(estate, state) > 0){
    #####:  955:        gainCard(estate, state, 0, currentPlayer);
    #####:  956:        state->supplyCount[estate]--;//Decrement estates
    #####:  957:        if (supplyCount(estate, state) == 0){
    #####:  958:    isGameOver(state);
        -:  959:        }
        -:  960:      }
    #####:  961:      card_not_discarded = 0;//Exit the loop
        -:  962:    }
        -:  963:          
        -:  964:    else{
    #####:  965:      p++;//Next card
        -:  966:    }
        -:  967:  }
        -:  968:      }
        -:  969:          
        -:  970:      else{
    #####:  971:  if (supplyCount(estate, state) > 0){
    #####:  972:    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  973:    state->supplyCount[estate]--;//Decrement Estates
    #####:  974:    if (supplyCount(estate, state) == 0){
    #####:  975:      isGameOver(state);
        -:  976:    }
        -:  977:  }
        -:  978:      }
        -:  979:      
        -:  980:      
    #####:  981:      return 0;
        -:  982:    
        -:  983:    case great_hall:
        -:  984:      //+1 Card
        1:  985:      drawCard(currentPlayer, state);
        -:  986:      
        -:  987:      //+1 Actions
        1:  988:      state->numActions++;
        -:  989:      
        -:  990:      //discard card from hand
        1:  991:      discardCard(handPos, currentPlayer, state, 0);
        1:  992:      return 0;
        -:  993:    
        -:  994:    case minion:
        -:  995:      //+1 action
    #####:  996:      state->numActions++;
        -:  997:      
        -:  998:      //discard card from hand
    #####:  999:      discardCard(handPos, currentPlayer, state, 0);
        -: 1000:      
    #####: 1001:      if (choice1)    //+2 coins
        -: 1002:  {
    #####: 1003:    state->coins = state->coins + 2;
        -: 1004:  }
        -: 1005:      
    #####: 1006:      else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1007:  {
        -: 1008:    //discard hand
    #####: 1009:    while(numHandCards(state) > 0)
        -: 1010:      {
    #####: 1011:        discardCard(handPos, currentPlayer, state, 0);
        -: 1012:      }
        -: 1013:        
        -: 1014:    //draw 4
    #####: 1015:    for (i = 0; i < 4; i++)
        -: 1016:      {
    #####: 1017:        drawCard(currentPlayer, state);
        -: 1018:      }
        -: 1019:        
        -: 1020:    //other players discard hand and redraw if hand size > 4
    #####: 1021:    for (i = 0; i < state->numPlayers; i++)
        -: 1022:      {
    #####: 1023:        if (i != currentPlayer)
        -: 1024:    {
    #####: 1025:      if ( state->handCount[i] > 4 )
        -: 1026:        {
        -: 1027:          //discard hand
    #####: 1028:          while( state->handCount[i] > 0 )
        -: 1029:      {
    #####: 1030:        discardCard(handPos, i, state, 0);
        -: 1031:      }
        -: 1032:              
        -: 1033:          //draw 4
    #####: 1034:          for (j = 0; j < 4; j++)
        -: 1035:      {
    #####: 1036:        drawCard(i, state);
        -: 1037:      }
        -: 1038:        }
        -: 1039:    }
        -: 1040:      }
        -: 1041:        
        -: 1042:  }
    #####: 1043:      return 0;
        -: 1044:    
        -: 1045:    case steward:
    #####: 1046:    stewardEffect(choice1, choice2, choice3, currentPlayer, handPos, state);
    #####: 1047:    return 0;
        -: 1048:    
        -: 1049:    case tribute:
    #####: 1050:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1051:  if (state->deckCount[nextPlayer] > 0){
    #####: 1052:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:    state->deckCount[nextPlayer]--;
        -: 1054:  }
    #####: 1055:  else if (state->discardCount[nextPlayer] > 0){
    #####: 1056:    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1057:    state->discardCount[nextPlayer]--;
        -: 1058:  }
        -: 1059:  else{
        -: 1060:    //No Card to Reveal
        -: 1061:    if (DEBUG){
        -: 1062:      printf("No cards to reveal\n");
        -: 1063:    }
        -: 1064:  }
        -: 1065:      }
        -: 1066:      
        -: 1067:      else{
    #####: 1068:  if (state->deckCount[nextPlayer] == 0){
    #####: 1069:    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1070:      state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1071:      state->deckCount[nextPlayer]++;
    #####: 1072:      state->discard[nextPlayer][i] = -1;
    #####: 1073:      state->discardCount[nextPlayer]--;
        -: 1074:    }
        -: 1075:          
    #####: 1076:    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1077:  } 
    #####: 1078:  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:  state->deckCount[nextPlayer]--;
    #####: 1081:  tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1082:  state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1083:  state->deckCount[nextPlayer]--;
        -: 1084:      }    
        -: 1085:           
    #####: 1086:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1087:  state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1088:  state->playedCardCount++;
    #####: 1089:  tributeRevealedCards[1] = -1;
        -: 1090:      }
        -: 1091:
    #####: 1092:      for (i = 0; i <= 2; i ++){
    #####: 1093:  if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1094:    state->coins += 2;
        -: 1095:  }
        -: 1096:        
    #####: 1097:  else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1098:    drawCard(currentPlayer, state);
    #####: 1099:    drawCard(currentPlayer, state);
        -: 1100:  }
        -: 1101:  else{//Action Card
    #####: 1102:    state->numActions = state->numActions + 2;
        -: 1103:  }
        -: 1104:      }
        -: 1105:      
    #####: 1106:      return 0;
        -: 1107:    
        -: 1108:    case ambassador:
    #####: 1109:      j = 0;    //used to check if player has enough cards to discard
        -: 1110:
    #####: 1111:      if (choice2 > 2 || choice2 < 0)
        -: 1112:  {
    #####: 1113:    return -1;        
        -: 1114:  }
        -: 1115:
    #####: 1116:      if (choice1 == handPos)
        -: 1117:  {
    #####: 1118:    return -1;
        -: 1119:  }
        -: 1120:
    #####: 1121:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1122:  {
    #####: 1123:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1124:      {
    #####: 1125:        j++;
        -: 1126:      }
        -: 1127:  }
    #####: 1128:      if (j < choice2)
        -: 1129:  {
    #####: 1130:    return -1;        
        -: 1131:  }
        -: 1132:
        -: 1133:      if (DEBUG) 
        -: 1134:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1135:
        -: 1136:      //increase supply count for choosen card by amount being discarded
    #####: 1137:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1138:      
        -: 1139:      //each other player gains a copy of revealed card
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
        -: 1141:  {
    #####: 1142:    if (i != currentPlayer)
        -: 1143:      {
    #####: 1144:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1145:      }
        -: 1146:  }
        -: 1147:
        -: 1148:      //discard played card from hand
    #####: 1149:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1150:
        -: 1151:      //trash copies of cards returned to supply
    #####: 1152:      for (j = 0; j < choice2; j++)
        -: 1153:  {
    #####: 1154:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1155:      {
    #####: 1156:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1157:    {
    #####: 1158:      discardCard(i, currentPlayer, state, 1);
    #####: 1159:      break;
        -: 1160:    }
        -: 1161:      }
        -: 1162:  }     
        -: 1163:
    #####: 1164:      return 0;
        -: 1165:    
        -: 1166:    case cutpurse:
        -: 1167:
    #####: 1168:      updateCoins(currentPlayer, state, 2);
    #####: 1169:      for (i = 0; i < state->numPlayers; i++)
        -: 1170:  {
    #####: 1171:    if (i != currentPlayer)
        -: 1172:      {
    #####: 1173:        for (j = 0; j < state->handCount[i]; j++)
        -: 1174:    {
    #####: 1175:      if (state->hand[i][j] == copper)
        -: 1176:        {
    #####: 1177:          discardCard(j, i, state, 0);
    #####: 1178:          break;
        -: 1179:        }
    #####: 1180:      if (j == state->handCount[i])
        -: 1181:        {
    #####: 1182:          for (k = 0; k < state->handCount[i]; k++)
        -: 1183:      {
        -: 1184:        if (DEBUG)
        -: 1185:          printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1186:      } 
    #####: 1187:          break;
        -: 1188:        }   
        -: 1189:    }
        -: 1190:          
        -: 1191:      }
        -: 1192:        
        -: 1193:  }       
        -: 1194:
        -: 1195:      //discard played card from hand
    #####: 1196:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1197:
    #####: 1198:      return 0;
        -: 1199:
        -: 1200:    
        -: 1201:    case embargo: 
        -: 1202:      //+2 Coins
    #####: 1203:      state->coins = state->coins + 2;
        -: 1204:      
        -: 1205:      //see if selected pile is in play
    #####: 1206:      if ( state->supplyCount[choice1] == -1 )
        -: 1207:  {
    #####: 1208:    return -1;
        -: 1209:  }
        -: 1210:      
        -: 1211:      //add embargo token to selected supply pile
    #####: 1212:      state->embargoTokens[choice1]++;
        -: 1213:      
        -: 1214:      //trash card
    #####: 1215:      discardCard(handPos, currentPlayer, state, 1);    
    #####: 1216:      return 0;
        -: 1217:    
        -: 1218:    case outpost:
        -: 1219:      //set outpost flag
    #####: 1220:      state->outpostPlayed++;
        -: 1221:      
        -: 1222:      //discard card
    #####: 1223:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1224:      return 0;
        -: 1225:    
        -: 1226:    case salvager:
        -: 1227:      //+1 buy
    #####: 1228:      state->numBuys++;
        -: 1229:      
    #####: 1230:      if (choice1)
        -: 1231:  {
        -: 1232:    //gain coins equal to trashed card
    #####: 1233:    state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1234:    //trash card
    #####: 1235:    discardCard(choice1, currentPlayer, state, 1);  
        -: 1236:  }
        -: 1237:      
        -: 1238:      //discard card
    #####: 1239:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1240:      return 0;
        -: 1241:    
        -: 1242:    case sea_hag:
    #####: 1243:      for (i = 0; i < state->numPlayers; i++){
    #####: 1244:  if (i != currentPlayer){
    #####: 1245:    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####: 1246:    state->discardCount[i]++;
    #####: 1247:    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1248:  }
        -: 1249:      }
    #####: 1250:      return 0;
        -: 1251:    
        -: 1252:    case treasure_map:
        -: 1253:      //search hand for another treasure_map
    #####: 1254:      index = -1;
    #####: 1255:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1256:  {
    #####: 1257:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1258:      {
    #####: 1259:        index = i;
    #####: 1260:        break;
        -: 1261:      }
        -: 1262:  }
    #####: 1263:      if (index > -1)
        -: 1264:  {
        -: 1265:    //trash both treasure cards
    #####: 1266:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1267:    discardCard(index, currentPlayer, state, 1);
        -: 1268:
        -: 1269:    //gain 4 Gold cards
    #####: 1270:    for (i = 0; i < 4; i++)
        -: 1271:      {
    #####: 1272:        gainCard(gold, state, 1, currentPlayer);
        -: 1273:      }
        -: 1274:        
        -: 1275:    //return success
    #####: 1276:    return 1;
        -: 1277:  }
        -: 1278:      
        -: 1279:      //no second treasure_map found in hand
    #####: 1280:      return -1;
        -: 1281:    }
        -: 1282:  
    #####: 1283:  return -1;
        -: 1284:}
        -: 1285:
     2003: 1286:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1287:{
        -: 1288:  
        -: 1289:  //if card is not trashed, added to Played pile 
     2003: 1290:  if (trashFlag < 1)
        -: 1291:    {
        -: 1292:      //add card to played pile
     1502: 1293:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1502: 1294:      state->playedCardCount++;
        -: 1295:    }
        -: 1296:  
        -: 1297:  //set played card to -1
     2003: 1298:  state->hand[currentPlayer][handPos] = -1;
        -: 1299:  
        -: 1300:  //remove card from player's hand
     2003: 1301:  if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
        -: 1302:    {
        -: 1303:      //reduce number of cards in hand
        6: 1304:      state->handCount[currentPlayer]--;
        -: 1305:    }
     1997: 1306:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1307:    {
        -: 1308:      //reduce number of cards in hand
    #####: 1309:      state->handCount[currentPlayer]--;
        -: 1310:    }
        -: 1311:  else  
        -: 1312:    {
        -: 1313:      //replace discarded card with last card in hand
     1997: 1314:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1315:      //set last card to -1
     1997: 1316:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1317:      //reduce number of cards in hand
     1997: 1318:      state->handCount[currentPlayer]--;
        -: 1319:    }
        -: 1320:  
     2003: 1321:  return 0;
        -: 1322:}
        -: 1323:
       11: 1324:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1325:{
        -: 1326:  //Note: supplyPos is enum of choosen card
        -: 1327:  
        -: 1328:  //check if supply pile is empty (0) or card is not used in game (-1)
       11: 1329:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1330:    {
        1: 1331:      return -1;
        -: 1332:    }
        -: 1333:  
        -: 1334:  //added card for [whoseTurn] current player:
        -: 1335:  // toFlag = 0 : add to discard
        -: 1336:  // toFlag = 1 : add to deck
        -: 1337:  // toFlag = 2 : add to hand
        -: 1338:
       10: 1339:  if (toFlag == 1)
        -: 1340:    {
        2: 1341:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        2: 1342:      state->deckCount[player]++;
        -: 1343:    }
        8: 1344:  else if (toFlag == 2)
        -: 1345:    {
        3: 1346:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        3: 1347:      state->handCount[player]++;
        -: 1348:    }
        -: 1349:  else
        -: 1350:    {
        5: 1351:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        5: 1352:      state->discardCount[player]++;
        -: 1353:    }
        -: 1354:  
        -: 1355:  //decrease number in supply pile
       10: 1356:  state->supplyCount[supplyPos]--;
        -: 1357:   
       10: 1358:  return 0;
        -: 1359:}
        -: 1360:
        8: 1361:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1362:{
        -: 1363:  int i;
        -: 1364:  
        -: 1365:  //reset coin count
        8: 1366:  state->coins = 0;
        -: 1367:
        -: 1368:  //add coins for each Treasure card in player's hand
       48: 1369:  for (i = 0; i < state->handCount[player]; i++)
        -: 1370:    {
       40: 1371:      if (state->hand[player][i] == copper)
        -: 1372:  {
       32: 1373:    state->coins += 1;
        -: 1374:  }
        8: 1375:      else if (state->hand[player][i] == silver)
        -: 1376:  {
    #####: 1377:    state->coins += 2;
        -: 1378:  }
        8: 1379:      else if (state->hand[player][i] == gold)
        -: 1380:  {
    #####: 1381:    state->coins += 3;
        -: 1382:  } 
        -: 1383:    } 
        -: 1384:
        -: 1385:  //add bonus
        8: 1386:  state->coins += bonus;
        -: 1387:
        8: 1388:  return 0;
        -: 1389:}
        -: 1390:
        -: 1391:
        -: 1392://end of dominion.c
